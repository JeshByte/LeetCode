So if we dry run some test cases we will see that, the right half can have elements up till index - 2n-1 and the left half can have elements up till index - n. Also we need to minimise right_sum-left_sum, thus the right half should be as small as possible where as the left half should be as large as possible. We can use heaps for this. Lets focus on the right half for now. We will traverse from indices 0 to 2n-1 i.e. the possible right half elements and push them into a max heap. We are using a max heap because we will always try to delete the largest element here as we want this half to be as small as possible. We will also maintain a sum for the current elements in the heap. When the heap size is more than n(the number of elements we need to have in each side), we will delete the max element and update the sum. And when it is equal to n, this means we have a possible valid sum and so we would store it in an array called right at the same index. We will do the same thing for the left side but now with a min heap. After we have calculated all the valid sums for both the sides, we will just go through them and calculate all the possible differences(which would be right[i]-left[i+1]) and the minimum one will be our answer.
