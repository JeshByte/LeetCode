If we dry run a few test cases, we will see that the popcount of an element will take at most 5 steps and can also have a value of atmost 5. So we can easily find the popcount of all the elements in O(1) using dp and precomputation. Then comes the next problem of solving the given queries. As there are only 6 possible values of k, we will just maintain a set for each k where we will have the sorted indices of the values having a popcount of k. Then depending on the query we will either update our sets or perform binary search to find the number of elements from the concerned set. But here we will still face tle if we use normal sets. Thus we will need to use ordered sets which are implemented using red black trees but act mostly as normal sets. What makes them useful here is that they have an inbuilt function of order_of_key(i) which gives the number of elements <i in the given set. So we can use this instead of doing binary search to find the number of elements and it is much more efficient too. In this way we can easily solve all the queries.
